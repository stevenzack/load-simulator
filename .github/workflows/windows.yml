# This workflow will build a .NET Core project and deploy it to an Azure Functions App on Windows or Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-csharp?tabs=in-process
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Action: https://github.com/Azure/functions-action
#   - Publish Profile: https://github.com/Azure/functions-action#using-publish-profile-as-deployment-credential-recommended
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: Windows

on:
  push:
    tags:
      - "v*"

env:
  AZURE_FUNCTIONAPP_NAME: 'your-app-name'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'       # set this to the path to your function app project, defaults to the repository root
  DOTNET_VERSION: '6.0.x'                   # set this to the dotnet version to use (e.g. '2.1.x', '3.1.x', '5.0.x')

jobs:
  build-and-deploy:
    runs-on: windows-latest # For Linux, use ubuntu-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4
    - name: Setup MSYS2
      # You may pin to the exact commit or the version.
      # uses: msys2/setup-msys2@ddf331adaebd714795f1042345e6ca57bd66cea8
      uses: msys2/setup-msys2@v2
      with:
        # After installation and/or update, install additional packages through pacman
        install: git mingw-w64-x86_64-toolchain
    - name: Setup Go environment
      uses: actions/setup-go@v5.0.2
      with:
        # The Go version to download (if necessary) and use. Supports semver spec and ranges. Be sure to enclose this option in single quotation marks.
        go-version: 1.22.6
        # go-version: 1.19.13
    - name: fyne install
      run: go install fyne.io/fyne/v2/cmd/fyne@v2.5.1
    - name: fyne build
      run: |
        fyne package -os windows -icon icon.png
        ls
    - name: Release and Upload
      uses: d1ceward/draft-assets-release-action@v3.0.0
      with:
        # The GitHub access token which will be used to upload release artifacts. Usually this will be `secrets.GITHUB_TOKEN`.
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          loadsimulator.exe
